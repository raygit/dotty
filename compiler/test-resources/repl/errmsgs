scala> class Inv[T](x: T)
// defined class Inv
scala> val x: List[String] = List(1)
1 | val x: List[String] = List(1)
  |                            ^
  |                            found:    Int(1)
  |                            required: String
scala> val y: List[List[String]] = List(List(1))
1 | val y: List[List[String]] = List(List(1))
  |                                       ^
  |                                       found:    Int(1)
  |                                       required: String
scala> val z: (List[String], List[Int]) = (List(1), List("a"))
1 | val z: (List[String], List[Int]) = (List(1), List("a"))
  |                                          ^
  |                                          found:    Int(1)
  |                                          required: String
1 | val z: (List[String], List[Int]) = (List(1), List("a"))
  |                                                   ^^^
  |                                                   found:    String("a")
  |                                                   required: Int
scala> val a: Inv[String] = new Inv(new Inv(1))
1 | val a: Inv[String] = new Inv(new Inv(1))
  |                              ^^^^^^^^^^
  |                              found:    Inv[Int]
  |                              required: String
scala> val b: Inv[String] = new Inv(1)
1 | val b: Inv[String] = new Inv(1)
  |                              ^
  |                              found:    Int(1)
  |                              required: String
scala> abstract class C { type T; val x: T; val s: Unit = { type T = String; var y: T = x; locally { def f() = { type T = Int; val z: T = y }; f() } }; }
1 | abstract class C { type T; val x: T; val s: Unit = { type T = String; var y: T = x; locally { def f() = { type T = Int; val z: T = y }; f() } }; }
  |                                                                                  ^
  |found:    C.this.T(C.this.x)
  |required: T'
  |
  |where:    T  is a type in class C
  |          T' is a type in the initializer of value s which is an alias of String
1 | abstract class C { type T; val x: T; val s: Unit = { type T = String; var y: T = x; locally { def f() = { type T = Int; val z: T = y }; f() } }; }
  |                                                                                                                                    ^
  |found:    T(y)
  |required: T'
  |
  |where:    T  is a type in the initializer of value s which is an alias of String
  |          T' is a type in method f which is an alias of Int
scala> class Foo() { def bar: Int = 1 }; val foo = new Foo(); foo.barr
1 | class Foo() { def bar: Int = 1 }; val foo = new Foo(); foo.barr
  |                                                        ^^^^^^^^
  |             value `barr` is not a member of Foo - did you mean `foo.bar`?
scala> val x: List[Int] = "foo" :: List(1)
1 | val x: List[Int] = "foo" :: List(1)
  |                    ^^^^^
  |                    found:    String("foo")
  |                    required: Int
scala> { def f: Int = g; val x: Int = 1; def g: Int = 5; }
1 | { def f: Int = g; val x: Int = 1; def g: Int = 5; }
  |                ^
  |           `g` is a forward reference extending over the definition of `x`
scala> while (((  foo ))) {}
1 | while (((  foo ))) {}
  |            ^^^
  |            not found: foo
scala> val a: iDontExist = 1
1 | val a: iDontExist = 1
  |        ^^^^^^^^^^
  |        not found: type iDontExist
scala> def foo1(x: => Int) = x _
1 | def foo1(x: => Int) = x _
  |                       ^^^
  |Only function types can be followed by _ but the current expression has type Int
scala> def foo2(x: => Int): () => Int = x _
1 | def foo2(x: => Int): () => Int = x _
  |                                  ^^^
  |Only function types can be followed by _ but the current expression has type Int
